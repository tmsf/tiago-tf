<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0"><channel><title>Tiago Fernandes - thoughts</title>
        <link>http://www.tiago.tf/thoughts</link>
        <description>Tiago Fernandes - thoughts</description>
        <language>en-gb</language>
        <lastBuildDate>2025-06-04T17:29:20.381Z</lastBuildDate><item>
            <title>Software development: Architecture vs Gardening</title>
            <link>http://www.tiago.tf/thoughts/2025-06-04-architecture-vs-gardening</link>
            <description><![CDATA[<h1>Software development: Architecture vs Gardening</h1>
<p>The computer science and software engineering are some of the youngest of the sciences and engineering branches.</p>
<p>Creating all the new abstractions made us borrowing terms from multiple areas.</p>
<img src="/thoughts-photos/gromit-gardener.png" max-width="600px" padding="3em"/>

<p>The fact that software does not abide by the physical rules that guided most of the other sciences made the creators seek common analogies to describe these new realities. </p>
<p>These Grey beards also took multiple language liberties in order to explain the complex abstractions. e.g. Parent killing children üò¨ ...processes üòÆ‚Äçüí®.
Other occasions, they just amuse themselves by using plain puns, typos, or play on words. e.g. &#39;creat&#39;, the recursive acronyms as GNU (GNU&#39;s not UNIX).</p>
<h2>Making a name for yourself</h2>
<p>When the industry around it matured, there was a need to vindicate your work as important as other engineering or sciences. Analogies to building and construction were present so it was only a matter of time for the industry to incorporate construction terms into their &quot;foundations&quot;. </p>
<p>As systems grew and moved away from single purpose software pieces into complex, multi team systems, and with that the need for organisation and some order. The manager of that order was, same as in a construction site, refered as the architect.</p>
<h1>The nature of software</h1>
<h2>software is not immutable</h2>
<p>From its conception, and going through the MVP to a stable phase and further iterations, the only constant is the fact that software is always changing.
Software faces product requirements changes, database schema changes, security updates, refactors.</p>
<h2>entropy</h2>
<p>Software development follows the laws of nature. Its quality gradually declines and consequently entropy arises. 
This entropy goes by many shapes and forms: technical debt, unintended complexity, lack of documentation, half finished implementations that create confusion and misalignment on future development patterns.</p>
<p>If these are left unattended we end up with the famous &quot;spaghetti codebase&quot;, &quot;the big ball of mud&quot;. This blend of everything into a paste also defined as entropy.</p>
<h2>software is not a building</h2>
<p>The way that we transmit our job people outside our realm is that we&#39;re builders, architects. The assumption is that we build and besides little fixer uppers buildings are built. Right?</p>
<p>Does software development &quot;ends&quot; as the construction of a building ends? 
After its construction a building might need a window to be fixed or a new coat of paint every now and then. </p>
<p><strong>But most definitely no builder would see as a feasible proposition moving the 3rd floor to a different lot whilst the lift must keep serving the 3rd floor after the 2nd and before the 4th.</strong></p>
<h1>is it a garden, then?</h1>
<p>Yes! (kinda).</p>
<h2>Software rots if not properly maintained</h2>
<p>As an unattended garden, an unmaintained system will rot. It will have security issues, bugs and exploits would be eventually discovered, non up to date APIs will stop working and fail to fulfil its purpose.</p>
<h2>Software needs care</h2>
<p>When adding a new feature you don&#39;t consider the implications, and don&#39;t perform that needed refactor, it will create tech debt. Similar as weeds or branches on a tree that are not properly prune to allow the tree&#39;s growth and other plants&#39; growth. You keep avoid this and you won&#39;t be able to enter your garden, and when you need to, you&#39;ll need a weedwacker to remove all of it to start over.</p>
<p>You need to care for it all the time.
You love the results, same way that you love to work on a simple, clear, clean codebase. It makes your day.</p>
<h2>Software evolves</h2>
<p>New software requirements arise, we need to adapt the current system to accomodate those needs.
Same way, when we need to plant a new crop we need to accomodate the soil and their surroundings to best fit them. </p>
<h1>is it gardening, really?</h1>
<p>Ok, hear me out. Gardening it&#39;s not a perfect analogy. The take to this argument is to</p>
<ul>
<li>Refocus our approach to software development from just <strong>building</strong> to <strong>grow and maintain</strong> entropy in check for the system&#39;s lifetime, not abandon it after launch day. </li>
<li>Set expectations on done, perfection, and some refrain on our self aggrandising. We&#39;re just some gardeners trying to make the best out of our plot.</li>
</ul>
<img src="/thoughts-photos/honest-work-meme.png" max-width="600px" margin="3em"/>

<h6>_______</h6>
<h6>published: 04/06/2025, 18:28:36 CEST</h6>
<h6>updated: 04/06/2025, 19:26:09 CEST</h6>
]]></description>
            <author>Tiago Fernandes</author>
            <pubDate>2025-06-04T16:28:36.238Z</pubDate>
            <guid>http://www.tiago.tf/thoughts/2025-06-04-architecture-vs-gardening</guid>
        </item>
<item>
            <title>We will fail again </title>
            <link>http://www.tiago.tf/thoughts/2024-11-02-we-will-fail-again</link>
            <description><![CDATA[<h1>We will fail again</h1>
<p>My team recently started to work on their Agile methodologies. Given the nature of the product we are <strong>forced to make a lot of discovery, customer research, and technical experimentation before we jump into delivery</strong>. For that reason we&#39;ve chosen to follow the Kanban methodology.</p>
<p>Our team is a mix of different profiles and experiences. Most of them weren&#39;t familiar with Kanban.
So adding to the overall day to day work, development, UX, product, we had to rethink our ways of working, and try to adjust it as best as we can to deliver. </p>
<p>As with any change, we have to try and fail. In each milestone  we&#39;ve delivered, we&#39;ve been getting a little better. After a couple of milestones we&#39;ve noticed improvements such as fewer bugs, fewer lingering tickets on the board, and the product getting into its appropriate shape faster.</p>
<p>Obviously we&#39;ve failed in x, y, and z points. </p>
<p>Whilst providing a team update, where I was quite happy with the overall progress, I didn&#39;t shy away from said failures, and the future ones: </p>
<hr>
<p><strong>We will eventually fail again, but we&#39;ll fail differently!</strong></p>
<hr>
<p>Failure is inevitable, even more so if you&#39;re facing a lot of unknown and new situations. </p>
<p>Failing on things that you&#39;ve already experienced can be at least prepared for, and mitigations can be set to try to avoid its most grave outcomes. </p>
<p>Learning from our mistakes, creating mechanisms to avoid them, and being open to uncertainty are key to deal with this product work.</p>
<h6>_______</h6>
<h6>published: 02/11/2024, 10:49:41 CET</h6>
<h6>updated: 02/11/2024, 12:23:57 CET</h6>
]]></description>
            <author>Tiago Fernandes</author>
            <pubDate>2024-11-02T09:49:41.838Z</pubDate>
            <guid>http://www.tiago.tf/thoughts/2024-11-02-we-will-fail-again</guid>
        </item>
<item>
            <title>hello world</title>
            <link>http://www.tiago.tf/thoughts/2024-06-28-hello-world</link>
            <description><![CDATA[<h1>hello world</h1>
<p>Oh boy, the amount of yak shaving that happened in order to get this note taking thingy up and running.</p>
<p>I wanted a simple, easy to create, edit, and delete posts within this static website. I didn&#39;t want no &quot;smart&quot; tools like jekyll, hugo, or anything like it. </p>
<h2>solution I</h2>
<p>I&#39;ve started digging and found a simple &quot;md to html&quot; converters on github. </p>
<p>I&#39;ve found a simple transformer. Quite rudimentary that did the job. </p>
<h3>Cool.</h3>
<p>But then I realised that I wanted to have a simple way to duplicate the headers to match my current design. </p>
<h2>solution II</h2>
<p>Into github again, I&#39;ve found another library that got the templating sorted. Little bash script. </p>
<h3>Done.</h3>
<p>Hum.. I need an index page so I can see the post list.
Ok, if I list the files I can automated around the npx script within the bash script. </p>
<h3>This is starting to look complicated...</h3>
<h2>solution III</h2>
<p>Let&#39;s add the index file.</p>
<h2>solution IV</h2>
<p>Dates, I need to add creation dates.</p>
<h2>solution V</h2>
<p><code>sitemap.xml</code> of course! Ok the bash file is getting out of control. I rather do this in the JS territory where all of this feels familiar.</p>
<h2>solution VI</h2>
<p>Let&#39;s lose some of the external libs, they&#39;re simpler to just rewrite in a new script. 
<em>RSS is also a cool feature don&#39;t forget to add it!</em></p>
<h2>solution VII</h2>
<p>Let&#39;s just use the same process as for the sitemap. we got it. </p>
<h3>I got it I reached perfection.</h3>
<h4>who am I kidding?</h4>
<p>Let&#39;s recap. I wanted just a simple blog where I could type a couple of thoughts, no hassles of external frameworks, or writting/duplicating boilerplate and html code all the time.</p>
<p>Where did I get to?</p>
<p>The script:</p>
<ul>
<li><p>‚ûï A node script that has an external dependency only. Doesn&#39;t need a full framework to render a dozen html files.</p>
</li>
<li><p>‚ûñ for having a dependency and a preprocess step</p>
</li>
</ul>
<p>The blog requirements: </p>
<ul>
<li><p>automatic timestamps in the files</p>
<ul>
<li>‚ûï it looks cool, and its quite easy to get a professional look, it will be useful for sitemap, rss. </li>
<li>‚ûñ spent too much time on it to look... like a timestamp.</li>
</ul>
</li>
<li><p><code>sitemap.xml</code> </p>
<ul>
<li>‚ûï it just worked with a simple iteration on files.</li>
</ul>
</li>
<li><p><code>rss.xml</code></p>
<ul>
<li>‚ûï just copied sitemaps&#39;s and got it</li>
</ul>
</li>
</ul>
<h4>Am I happy?</h4>
<p>Of course not. The current css is wonky. The script is a mess of names and functions that make sense to no one. And I&#39;ll definetely will do all possible things besides writing on it.</p>
<p>Oh and for now, I&#39;m right there in the bottom right üëá (<a href="https://rakhim.org/honestly-undefined/19/">Honestly Undefined</a>). </p>
<img src="https://rakhim.org/images/honestly-undefined/blogging.jpg" alt="https://rakhim.org/honestly-undefined/19/" width="400" margin="1em"/>

<p>See you soon.</p>
<h6>_______</h6>
<h6>published: 28/06/2024, 21:42:54 CEST</h6>
<h6>updated: 29/06/2024, 13:11:40 CEST</h6>
]]></description>
            <author>Tiago Fernandes</author>
            <pubDate>2024-06-28T19:42:54.089Z</pubDate>
            <guid>http://www.tiago.tf/thoughts/2024-06-28-hello-world</guid>
        </item></channel></rss>